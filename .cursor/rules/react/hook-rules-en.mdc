---
globs: packages/admin-react/docs/en/hook_*.md
alwaysApply: false
---

## Template(ENG)

- Create Hook's document files in the following format  
  ex) Hook's file route = `src/hooks/useAsyncLoading.tsx`

  ````md
  # useAsyncLoading

  English | [한국어]({relative URL})

  - A Hook to manage the loading status of async process.
  - Accept Promise as a factor and return the loading status and Promise results.

  ## Example

  ```tsx
  import { useAsyncLoading } from '@fetoolkit/react';
  ...
  const [isLoading, startTransition] = useAsyncLoading();
  ...
  const fetchData = async () => {
    try {
        const data = await startTransition(fetch('/api/data'));
        console.log(data);
    } catch (error) {
        console.error('Error fetching data:', error);
    }
  };
  ```

  ## API Reference

  ### Input(none)

  This Hook does not accept parameters.

  ### Output(tuple)

  ```typescript
  [isLoading: boolean, startTransition:function]
  ```

  | Name            | Type                                | Description                                                                                                                                                                              |
  | --------------- | ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
  | isLoading       | boolean                             | Load status of asynchronous function wrapped by startTransition <br> - When the request is started, it is changed to `true` and when the request is completed, it is changed to `false`. |
  | startTransition | (req: Promise\<T\>) => Promise\<T\> | Method to enclose async functions for loading processing                                                                                                                                 |
  ````

## template detail description

- title
- template: `#{HookName}`
- description
- Add One or Two lines of brief Description
- write by Each language
- example Code
- TOC(Table of Contents): `## 기본 사용 예시`
- language: tsx
- Just add code blocks and don't write the code
- API References
- TOC(Table of Contents): `## API 설명`
- Seperate by input and output of hook
- input
  - TOC title(input): `### Input({input type(tuple, object, etc)})`
  - Table Column Info
    - Name
    - Type
      - argument type
        - If the argument depends on the generic type, indicate it as generic type
    - Required(Mandatory Specification)
    - Description(One line of brief Description, write by Each language)
- output
  - TOC title(input): `### Output({input type(tuple, object, etc)})`
  - Add Return Type as TypeScript Code
  - Table Column Info
    - Name
    - Type
      - If the value depends on the generic type, indicate it as generic type
    - Description(One line of brief Description, write by Each language)
